{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "Kundenkuerzel": {
            "type": "String",
            "metadata": {
                "description": "Kundenkuerzel, zwischen 2 und 4 Stellen. Darf nicht mehrfach unter unitop BI Deployments vorkommen."
            }
        },
        "EnvironmentNumber": {
            "type": "String",
            "metadata": {
                "description": "Nummer der Umgebung. Laufende Nummer über alle Umgebungen hinweg, um Namenskonflikte zu verhindern."
            }
        },
        "Analysis_Service_Admin_Account": {
            "type": "String",
            "metadata": {
                "description": "E-Mail Addresse des Azure AD Accounts, des Admins des Analysis Services. Dieser Account muss im Azure AD des Tenants vorhanden sein, in dem unitop BI bereitgestellt wird."
            }
        },
        "TargitAppID": {
            "type": "String",
            "metadata": {
                "description": "Application ID der App Registration für Targit"
            }
        },
        "TargitTenantID": {
            "type": "String",
            "metadata": {
                "description": "Tenant ID der App Registration für Targit"
            }
        },
        "Analysis_Services_Tarif": {
            "defaultValue": "B1",
            "allowedValues": [
                "D1",
                "B1",
                "B2",
                "S0",
                "S1",
                "S2",
                "S4",
                "S8",
                "S9",
                "S8v2",
                "S9v2"
            ],
            "type": "String",
            "metadata": {
                "description": "Performancestufe für den Analysis Service"
            }
        },
        "SQL_Server_SA_Password": {
            "type": "SecureString",
            "metadata": {
                "description": "Passwort für den SQL Server Administrator."
            }
        },
        "Umgebungstyp": {
            "defaultValue": "t",
            "allowedValues": [
                "p",
                "d",
                "t"
            ],
            "type": "String"
        },
        "NAVDatenbankPWDE": {
            "type": "SecureString",
            "metadata": {
                "description": "Passwort für BI Datareader der NAV DB DE"
            }
        },
        "NAVDatenbankPWAT": {
            "type": "SecureString",
            "metadata": {
                "description": "Passwort für BI Datareader der NAV DB AT"
            }
        },
        "NAVDatenbankPWCH": {
            "type": "SecureString",
            "metadata": {
                "description": "Passwort für BI Datareader der NAV DB AT"
            }
        },
        "SetupIP": {
            "defaultValue": "194.127.254.200",
            "type": "String",
            "metadata": {
                "description": "IP Range für die Zugriff auf Targit VM und Synapse erlaubt ist"
            }
        }
    },
    "variables": {
        "azureRegionName": "[resourceGroup().location]",
        "resourceGroupName": "[resourceGroup().name]",
        "subscriptionID": "[subscription().subscriptionId]",
        "analysisServiceName": "[format('ubi{0}as{1}{2}', parameters('Umgebungstyp'), toLower(parameters('Kundenkuerzel')), parameters('EnvironmentNumber'))]",
        "dataFactoryName": "[format('ubi{0}-adf-{1}{2}', parameters('Umgebungstyp'), toLower(parameters('Kundenkuerzel')), parameters('EnvironmentNumber'))]",
        "analysisServiceModelName": "unitopBI",
        "SynapseName": "[toLower(format('ubi{0}synws{1}{2}', parameters('Umgebungstyp'), parameters('Kundenkuerzel'), parameters('EnvironmentNumber')))]",
        "SynapseManagedRGName": "[toLower(format('SynapseManagedRG-ubi{0}synws{1}{2}', parameters('Umgebungstyp'), parameters('Kundenkuerzel'), parameters('EnvironmentNumber')))]",
        "SQLADMUsername": "UBISQLADM",
        "DWHDatabaseName": "DWH",
        "DWHDatabaseCollocation": "SQL_Latin1_General_CP1_CI_AS",
        "ContributorRoleID": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
        "StorageBlobDataContributorRoleID": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe', subscription().subscriptionId)]",
        "KeyVaultName": "[format('ubi{0}kv{1}{2}', parameters('Umgebungstyp'), toLower(parameters('Kundenkuerzel')), parameters('EnvironmentNumber'))]",
        "DWHConnectionstring": "[format('Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source={0}.database.windows.net;Initial Catalog={1};User ID={2}', variables('SynapseName'), variables('DWHDatabaseName'), variables('SQLADMUsername'))]",
        "DataLakeName": "[format('ubi{0}dl{1}{2}', parameters('Umgebungstyp'), parameters('Kundenkuerzel'), parameters('EnvironmentNumber'))]",
        "SynapseStageStorageName": "[format('ubi{0}synstage{1}{2}', parameters('Umgebungstyp'), parameters('Kundenkuerzel'), parameters('EnvironmentNumber'))]",
        "SynapsePoolName": "[format('{0}/DWH', toLower(format('ubi{0}synws{1}{2}', parameters('Umgebungstyp'), parameters('Kundenkuerzel'), parameters('EnvironmentNumber'))))]",
        "SYNSqlSecretName": "SynapseSQLPW",
        "CSVStorageEndpointURI": "[format('https://ubi{0}dl{1}{2}.blob.core.windows.net', parameters('Umgebungstyp'), parameters('Kundenkuerzel'), parameters('EnvironmentNumber'))]",
        "TargitVMName": "TargitServer",
        "commonRessourcesRG": "RG_unitop_BI_common_resources",
        "SourceNAVDE_connectionString": "Integrated Security=False;Data Source=BOESQL-AO1.boesner365.rz;Initial Catalog=NAV90_GER_BOESNER_PROD;User ID=svc_targit_dbuser",
        "SourceNAVAT_connectionString": "Integrated Security=False;Data Source=192.168.0.222;Initial Catalog=navprd;User ID=Targit",
        "SourceNAVCH_connectionString": "Integrated Security=False;Data Source=192.168.30.41;Initial Catalog=navprd;User ID=Targit"
    },
    "functions": [],
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('DataLakeName')]",
            "location": "[variables('azureRegionName')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "encryption": {
                    "services": {
                        "blob": {
                            "enabled": true,
                            "keyType": "Account"
                        },
                        "file": {
                            "enabled": true,
                            "keyType": "Account"
                        },
                        "table": {
                            "enabled": true,
                            "keyType": "Account"
                        },
                        "queue": {
                            "enabled": true,
                            "keyType": "Account"
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot",
                "supportsHttpsTrafficOnly": true,
                "isHnsEnabled": false,
                "largeFileSharesState": "Disabled",
                "routingPreference": {
                    "routingChoice": "MicrosoftRouting",
                    "publishMicrosoftEndpoints": true,
                    "publishInternetEndpoints": true
                },
                "allowBlobPublicAccess": false,
                "minimumTlsVersion": "TLS1_2"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('SynapseStageStorageName')]",
            "location": "[variables('azureRegionName')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "encryption": {
                    "services": {
                        "blob": {
                            "enabled": true,
                            "keyType": "Account"
                        },
                        "file": {
                            "enabled": true,
                            "keyType": "Account"
                        },
                        "table": {
                            "enabled": true,
                            "keyType": "Account"
                        },
                        "queue": {
                            "enabled": true,
                            "keyType": "Account"
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot",
                "supportsHttpsTrafficOnly": true,
                "isHnsEnabled": false,
                "largeFileSharesState": "Disabled",
                "routingPreference": {
                    "routingChoice": "MicrosoftRouting",
                    "publishMicrosoftEndpoints": true,
                    "publishInternetEndpoints": true
                },
                "allowBlobPublicAccess": false,
                "minimumTlsVersion": "TLS1_2"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces",
            "apiVersion": "2020-12-01",
            "name": "[variables('SynapseName')]",
            "location": "[variables('azureRegionName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('DataLakeName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "managedResourceGroupName": "[variables('SynapseManagedRGName')]",
                "sqlAdministratorLogin": "ubisqladm",
                "sqlAdministratorLoginPassword": "[parameters('SQL_Server_SA_Password')]",
                "defaultDataLakeStorage": {
                    "accountUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('DataLakeName'))).primaryEndpoints.dfs]",
                    "filesystem": "dlfs"
                }
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/sqlPools",
            "apiVersion": "2020-12-01",
            "name": "[variables('SynapsePoolName')]",
            "location": "[variables('azureRegionName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('SynapseName'))]"
            ],
            "sku": {
                "name": "DW100c"
            },
            "properties": {
                "collation": "[variables('DWHDatabaseCollocation')]"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/firewallRules",
            "apiVersion": "2021-03-01",
            "name": "[format('{0}/AllowAllWindowsAzureIps', variables('SynapseName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('SynapseName'))]"
            ],
            "properties": {
                "endIpAddress": "0.0.0.0",
                "startIpAddress": "0.0.0.0"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/firewallRules",
            "apiVersion": "2021-03-01",
            "name": "[format('{0}/UBIAgentAccess', variables('SynapseName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('SynapseName'))]"
            ],
            "properties": {
                "endIpAddress": "[parameters('SetupIP')]",
                "startIpAddress": "[parameters('SetupIP')]"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/firewallRules",
            "apiVersion": "2021-03-01",
            "name": "[format('{0}/GOBA5', variables('SynapseName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('SynapseName'))]"
            ],
            "properties": {
                "endIpAddress": "194.127.254.200",
                "startIpAddress": "194.127.254.200"
            }
        },
        {
            "type": "Microsoft.AnalysisServices/servers",
            "apiVersion": "2017-08-01",
            "name": "[variables('analysisServiceName')]",
            "location": "[variables('azureRegionName')]",
            "sku": {
                "name": "[parameters('Analysis_Services_Tarif')]"
            },
            "properties": {
                "asAdministrators": {
                    "members": [
                        "[parameters('Analysis_Service_Admin_Account')]",
                        "[format('app:{0}@{1}', parameters('TargitAppID'), parameters('TargitTenantID'))]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[variables('KeyVaultName')]",
            "location": "[variables('azureRegionName')]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "tags": {},
            "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "accessPolicies": [
                    {
                        "tenantId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]",
                        "permissions": {
                            "secrets": [
                                "get"
                            ]
                        }
                    }
                ],
                "vaultUri": "string",
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "enableSoftDelete": false,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Deny"
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[format('{0}/DE-NAV-DB-PW', variables('KeyVaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]"
            ],
            "tags": {},
            "properties": {
                "value": "[parameters('NAVDatenbankPWDE')]",
                "contentType": "string",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[format('{0}/AT-NAV-DB-PW', variables('KeyVaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]"
            ],
            "tags": {},
            "properties": {
                "value": "[parameters('NAVDatenbankPWAT')]",
                "contentType": "string",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[format('{0}/CH-NAV-DB-PW', variables('KeyVaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]"
            ],
            "tags": {},
            "properties": {
                "value": "[parameters('NAVDatenbankPWCH')]",
                "contentType": "string",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]"
            ],
            "tags": {},
            "properties": {
                "value": "[parameters('SQL_Server_SA_Password')]",
                "contentType": "string",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories",
            "apiVersion": "2018-06-01",
            "name": "[variables('dataFactoryName')]",
            "location": "[variables('azureRegionName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Synapse/workspaces', variables('SynapseName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "globalParameters": {
                    "subscriptionID": {
                        "type": "String",
                        "value": "[variables('subscriptionID')]"
                    },
                    "resourceGroupName": {
                        "type": "String",
                        "value": "[variables('resourceGroupName')]"
                    },
                    "analysisserviceName": {
                        "type": "String",
                        "value": "[variables('analysisServiceName')]"
                    },
                    "azuredatafactoryName": {
                        "type": "String",
                        "value": "[variables('dataFactoryName')]"
                    },
                    "regionName": {
                        "type": "String",
                        "value": "[variables('azureRegionName')]"
                    },
                    "databaseName": {
                        "type": "String",
                        "value": "[variables('analysisServiceModelName')]"
                    },
                    "SynapseWorkspaceName": {
                        "type": "String",
                        "value": "[variables('SynapseName')]"
                    },
                    "synapseresourceGroupName": {
                        "type": "String",
                        "value": "[variables('resourceGroupName')]"
                    },
                    "TargitVMName": {
                        "type": "String",
                        "value": "[variables('TargitVMName')]"
                    },
                    "AnalysisSerivceDefaultSKU": {
                        "type": "String",
                        "value": "S0"
                    },
                    "AnalysisServiceProcessingSKU": {
                        "type": "String",
                        "value": "S0"
                    },
                    "TARGITresourceGroupName": {
                        "type": "String",
                        "value": "[variables('commonRessourcesRG')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Azure AS Refresh', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "UntilRefreshComplete",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "FilterToCurrentRefresh",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(activity('GetAzureASRefreshStatus').output.status,'inProgress'))",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "GetAzureASRefreshStatus",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Wait30Seconds",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "https://@{pipeline().globalParameters.regionName}.asazure.windows.net/servers/@{pipeline().globalParameters.analysisserviceName}/models/@{pipeline().globalParameters.databaseName}/refreshes/@{activity('FilterToCurrentRefresh').output.Value[0].refreshId}",
                                            "type": "Expression"
                                        },
                                        "method": "GET",
                                        "headers": {},
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://*.asazure.windows.net"
                                        }
                                    }
                                },
                                {
                                    "name": "Wait30Seconds",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 30
                                    }
                                }
                            ],
                            "timeout": "7.00:00:00"
                        }
                    },
                    {
                        "name": "FilterToCurrentRefresh",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "GetAzureASRefreshes",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@json(activity('GetAzureASRefreshes').output.Response)",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@greaterOrEquals(item().startTime,addseconds(activity('StartProcessingAzureAS').output.startTime,-30))",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "StartProcessingAzureAS",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "https://@{pipeline().globalParameters.regionName}.asazure.windows.net/servers/@{pipeline().globalParameters.analysisserviceName}/models/@{pipeline().globalParameters.databaseName}/refreshes",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {},
                            "body": {
                                "Type": "Full",
                                "CommitMode": "transactional",
                                "MaxParallelism": 10,
                                "RetryCount": 2
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://*.asazure.windows.net"
                            }
                        }
                    },
                    {
                        "name": "GetAzureASRefreshes",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "StartProcessingAzureAS",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "https://@{pipeline().globalParameters.regionName}.asazure.windows.net/servers/@{pipeline().globalParameters.analysisserviceName}/models/@{pipeline().globalParameters.databaseName}/refreshes",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "body": {
                                "Type": "Full",
                                "CommitMode": "transactional",
                                "MaxParallelism": 10,
                                "RetryCount": 2
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://*.asazure.windows.net"
                            }
                        }
                    },
                    {
                        "name": "throw error if failed",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "UntilRefreshComplete",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('GetAzureASRefreshStatus').output.status, 'failed')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Throw Error",
                                    "description": "Dies ist eine Nulldivision und schlägt immer fehl.\nEs gibt leider keine Activity mit der ein Error geworfen werden kann, daher dieser Weg.",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "ErrorVar",
                                        "value": {
                                            "value": "@div(1,0)",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "variables": {
                    "ErrorVar": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Manage"
                },
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Azure AS Resume', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "isASPaused",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "getASStatus",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals('Succeeded',string(activity('getASStatus').output.properties.state)))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "ResumeAzureAS",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "https://management.azure.com/subscriptions/@{pipeline().globalParameters.subscriptionID}/resourcegroups/@{pipeline().globalParameters.resourceGroupName}/providers/Microsoft.AnalysisServices/servers/@{pipeline().globalParameters.analysisserviceName}/resume?api-version=2017-08-01",
                                            "type": "Expression"
                                        },
                                        "method": "POST",
                                        "headers": {},
                                        "body": {
                                            "value": "@null",
                                            "type": "Expression"
                                        },
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://management.azure.com/"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "getASStatus",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "https://management.azure.com/subscriptions/@{pipeline().globalParameters.subscriptionID}/resourcegroups/@{pipeline().globalParameters.resourceGroupName}/providers/Microsoft.AnalysisServices/servers/@{pipeline().globalParameters.analysisserviceName}?api-version=2017-08-01",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://management.azure.com/"
                            }
                        }
                    },
                    {
                        "name": "UntilAzureASResumed",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "isASPaused",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals('Succeeded',string(activity('CheckAzureASStatus').output.properties.state))",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "CheckAzureASStatus",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "https://management.azure.com/subscriptions/@{pipeline().globalParameters.subscriptionID}/resourcegroups/@{pipeline().globalParameters.resourceGroupName}/providers/Microsoft.AnalysisServices/servers/@{pipeline().globalParameters.analysisserviceName}?api-version=2017-08-01",
                                            "type": "Expression"
                                        },
                                        "method": "GET",
                                        "headers": {},
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://management.azure.com/"
                                        }
                                    }
                                }
                            ],
                            "timeout": "7.00:00:00"
                        }
                    }
                ],
                "folder": {
                    "name": "Manage"
                },
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Azure AS Suspend', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "isASPaused",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "getASStatus",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals('Succeeded',string(activity('getASStatus').output.properties.state)))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "StopAzureAS",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "https://management.azure.com/subscriptions/@{pipeline().globalParameters.subscriptionID}/resourcegroups/@{pipeline().globalParameters.resourceGroupName}/providers/Microsoft.AnalysisServices/servers/@{pipeline().globalParameters.analysisserviceName}/suspend?api-version=2017-08-01",
                                            "type": "Expression"
                                        },
                                        "method": "POST",
                                        "headers": {},
                                        "body": {
                                            "value": "@null",
                                            "type": "Expression"
                                        },
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://management.azure.com/"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "getASStatus",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "https://management.azure.com/subscriptions/@{pipeline().globalParameters.subscriptionID}/resourcegroups/@{pipeline().globalParameters.resourceGroupName}/providers/Microsoft.AnalysisServices/servers/@{pipeline().globalParameters.analysisserviceName}?api-version=2017-08-01",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://management.azure.com/"
                            }
                        }
                    }
                ],
                "folder": {
                    "name": "Manage"
                },
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "description": "Löscht alle DW Tabellen und setzt den Watermark für diese Tabelle zurück",
                "activities": [
                    {
                        "name": "Get all tables",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT 'ETL.[' + ETL_TableName + ']' as TableName FROM ETL.cfg\nUNION\nSELECT DISTINCT DWTab as TableName FROM DW.cfg",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "DummyTable",
                                    "schemaname": "DW"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "loop truncate",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get all tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get all tables').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "truncate table",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[etl].[sp_truncateTable]",
                                        "storedProcedureParameters": {
                                            "TABLENAME": {
                                                "value": {
                                                    "value": "@item().TableName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Reset all Watermarks",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[ETL].[sp_resetAllWatermarks]"
                        },
                        "linkedServiceName": {
                            "referenceName": "SYN DWH",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "folder": {
                    "name": "Manage"
                },
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SYN ETL - DW', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "loop incremental tables",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "incremental",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('incremental').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "copy incremental ETL-DW",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[ETL].[sp_incrementalCopy]",
                                        "storedProcedureParameters": {
                                            "DWTableNameWithSchema": {
                                                "value": {
                                                    "value": "@item().DWTab",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ETLTableNameWithSchema": {
                                                "value": {
                                                    "value": "@item().ETLTab",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "KeyColName": {
                                                "value": {
                                                    "value": "@item().SurKey",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "isInlineTransformation",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "copy incremental ETL-DW",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(item().TransformType,'stored-procedure-inline-dw')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "exec inline SP",
                                                "description": "Ausführen der benutzerdefinierten Stored Procedure im \"inline\" Modus, also direkt nach Abschluss der Übertragung der Tabelle.",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": {
                                                        "value": "ETL.@{item().TransformStoredProcedure}",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "SYN DWH",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "incremental",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "Get Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Tables').output.value",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@and(\nequals(item().LoadType,'incremental'),\nor( equals(item().TableScope,'NAVTenant'),equals(item().TableScope,'simple') )\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "loop BCTenant tables",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "BCTenant",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('BCTenant').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "isInlineTransformation BCTenant",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "copy BCTenant",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(item().TransformType,'stored-procedure-inline-dw')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "exec inline SP BCTenant",
                                                "description": "Ausführen der benutzerdefinierten Stored Procedure im \"inline\" Modus, also direkt nach Abschluss der Übertragung der Tabelle.",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": {
                                                        "value": "ETL.@{item().TransformStoredProcedure}",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "SYN DWH",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "copy BCTenant",
                                    "description": "Lädt Daten aus der ETL Stage und fügt sie in die gemeinsame DW Tabelle ein.",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": {
                                            "value": "ETL.BCTransfer_@{item().UBITableCode}",
                                            "type": "Expression"
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get Tables",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT * FROM DW.cfg\nWHERE Enabled = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "DW"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "BCTenant",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "Get Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Tables').output.value",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@equals(item().TableScope,'BCTenant')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "CSVFiles",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "Get Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Tables').output.value",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@equals(item().TableScope,'CSVFile')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "loop CSVFiles",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "CSVFiles",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('CSVFiles').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "isInlineTransformation CSVFile",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "copy CSVFile",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(item().TransformType,'stored-procedure-inline-dw')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "exec inline SP CSVFiles",
                                                "description": "Ausführen der benutzerdefinierten Stored Procedure im \"inline\" Modus, also direkt nach Abschluss der Übertragung der Tabelle.",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": {
                                                        "value": "ETL.@{item().TransformStoredProcedure}",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "SYN DWH",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "copy CSVFile",
                                    "description": "",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[ETL].[sp_CopyCSVFilesStage]",
                                        "storedProcedureParameters": {
                                            "DWTableNameWithSchema": {
                                                "value": {
                                                    "value": "@item().DWTab",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ETLTableNameWithSchema": {
                                                "value": {
                                                    "value": "@item().ETLTab",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "ETLColumns": {
                                                "value": {
                                                    "value": "@item().ETLCols",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SYN MASTER without StartStop', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Scale', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Scale', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "get delayed SPs incremental",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT TransformStoredProcedure FROM ETL.cfg WHERE TransformType = 'stored-procedure-delayed' AND LoadType = 'incremental' AND Enabled = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "ETL"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ETL Post Process delayed",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get delayed SPs incremental",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "loop tenants SRC-ETL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get delayed SPs incremental').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "execute delayed SP ETL",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": {
                                            "value": "ETL.@{item().TransformStoredProcedure}",
                                            "type": "Expression"
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SYN ETL - DW",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ETL Post Process delayed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "SYN ETL - DW",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "get delayed SPs full load",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT TransformStoredProcedure FROM ETL.cfg WHERE TransformType = 'stored-procedure-delayed-dw' AND Enabled = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "ETL"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "DW Post Process delayed",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "SYN ETL - DW",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "get delayed SPs full load",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get delayed SPs full load').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "execute delayed SP DW",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": {
                                            "value": "ETL.@{item().TransformStoredProcedure}",
                                            "type": "Expression"
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Azure AS Refresh",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "if AS should scale up",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Azure AS Refresh",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Get all tables to truncate",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT\n    CASE LoadType\n        WHEN 'full' THEN DW_Tab\n        ELSE DST_Tab\n    END as TableName\nFROM [etl].[cfg]\nWHERE Enabled = 1 AND (LoadType = 'full' or LoadType = 'incremental') AND TableScope = 'NAVTenant' AND TableScope = 'Simple'\nUNION\nSELECT distinct DST_Tab as TableName\nFROM [etl].[cfg]\nWHERE Enabled = 1 AND TableScope = 'BCTenant'\nUNION\nSELECT distinct DW_Tab as TableName\nFROM [etl].[cfg]\nWHERE Enabled = 1 AND LoadType = 'full' AND TableScope = 'BCTenant';",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "DummyTable",
                                    "schemaname": "DW"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "loop truncate",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get all tables to truncate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get all tables to truncate').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "truncate table",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[etl].[sp_truncateTable]",
                                        "storedProcedureParameters": {
                                            "TABLENAME": {
                                                "value": {
                                                    "value": "@item().TableName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "get company IDs",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "loop truncate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT SRC_CompanyID as CompanyID\nFROM ETL.cfg\nWHERE Enabled = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "ETL"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "loop tenants SRC-ETL",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get company IDs",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get company IDs').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "SYN SRC - ETL",
                                    "description": "Laden der Daten aus der Source Datenbank in die ETL Stage des DWH",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "SYN SRC - ETL",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "TenantID": {
                                                "value": "@item().CompanyID",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "if AS should scale up",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "DW Post Process delayed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(pipeline().globalParameters.AnalysisSerivceDefaultSKU,pipeline().globalParameters.AnalysisServiceProcessingSKU))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Scale up",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "Azure AS Scale",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "ASSKU": {
                                                "value": "@pipeline().globalParameters.AnalysisServiceProcessingSKU",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "if AS should scale down",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Azure AS Refresh",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(pipeline().globalParameters.AnalysisSerivceDefaultSKU,pipeline().globalParameters.AnalysisServiceProcessingSKU))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Scale down",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "Azure AS Scale",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "ASSKU": {
                                                "value": "@pipeline().globalParameters.AnalysisSerivceDefaultSKU",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SYN MASTER', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Scale', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Scale', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "get delayed SPs incremental",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Synapse Resume",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT TransformStoredProcedure FROM ETL.cfg WHERE TransformType = 'stored-procedure-delayed' AND LoadType = 'incremental' AND Enabled = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "ETL"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ETL Post Process delayed",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get delayed SPs incremental",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "loop tenants SRC-ETL",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get delayed SPs incremental').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "execute delayed SP ETL",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": {
                                            "value": "ETL.@{item().TransformStoredProcedure}",
                                            "type": "Expression"
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SYN ETL - DW",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ETL Post Process delayed",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "SYN ETL - DW",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "get delayed SPs full load",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Synapse Resume",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT TransformStoredProcedure FROM ETL.cfg WHERE TransformType = 'stored-procedure-delayed-dw' AND Enabled = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "ETL"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "DW Post Process delayed",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "SYN ETL - DW",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "get delayed SPs full load",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get delayed SPs full load').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "execute delayed SP DW",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": {
                                            "value": "ETL.@{item().TransformStoredProcedure}",
                                            "type": "Expression"
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Synapse Resume",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Synapse Resume",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Azure AS Resume",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Azure AS Resume",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Azure AS Refresh",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "if AS should scale up",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Azure AS Refresh",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Synapse Pause",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "if AS should scale down",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Synapse Pause",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Azure AS Suspend",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "if AS should scale down",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Azure AS Suspend",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Get all tables to truncate",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Synapse Resume",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT\n    CASE LoadType\n        WHEN 'full' THEN DW_Tab\n        ELSE DST_Tab\n    END as TableName\nFROM [etl].[cfg]\nWHERE Enabled = 1 AND (LoadType = 'full' or LoadType = 'incremental') AND TableScope <> 'BCTenant'\nUNION\nSELECT distinct DST_Tab as TableName\nFROM [etl].[cfg]\nWHERE Enabled = 1 AND LoadType = 'incremental' AND TableScope = 'BCTenant'\nUNION\nSELECT distinct DW_Tab as TableName\nFROM [etl].[cfg]\nWHERE Enabled = 1 AND LoadType = 'full' AND TableScope = 'BCTenant';",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "DummyTable",
                                    "schemaname": "DW"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "loop truncate",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get all tables to truncate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get all tables to truncate').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "truncate table",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[etl].[sp_truncateTable]",
                                        "storedProcedureParameters": {
                                            "TABLENAME": {
                                                "value": {
                                                    "value": "@item().TableName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "get company IDs",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "loop truncate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT SRC_CompanyID as CompanyID\nFROM ETL.cfg\nWHERE Enabled = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "ETL"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "loop tenants SRC-ETL",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get company IDs",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get company IDs').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "SYN SRC - ETL",
                                    "description": "Laden der Daten aus der Source Datenbank in die ETL Stage des DWH",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "SYN SRC - ETL",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "TenantID": {
                                                "value": "@item().CompanyID",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "if AS should scale up",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "DW Post Process delayed",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "Azure AS Resume",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(pipeline().globalParameters.AnalysisSerivceDefaultSKU,pipeline().globalParameters.AnalysisServiceProcessingSKU))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Scale up",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "Azure AS Scale",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "ASSKU": {
                                                "value": "@pipeline().globalParameters.AnalysisServiceProcessingSKU",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "if AS should scale down",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Azure AS Refresh",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@not(equals(pipeline().globalParameters.AnalysisSerivceDefaultSKU,pipeline().globalParameters.AnalysisServiceProcessingSKU))",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Scale down",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "Azure AS Scale",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "ASSKU": {
                                                "value": "@pipeline().globalParameters.AnalysisSerivceDefaultSKU",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Synapse Pause on scale error",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "if AS should scale up",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Synapse Pause",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Azure AS Suspend on scale error",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "if AS should scale up",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Azure AS Suspend",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SYN MASTER no StartStop no AS', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "get delayed SPs incremental",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT TransformStoredProcedure FROM ETL.cfg WHERE TransformType = 'stored-procedure-delayed' AND LoadType = 'incremental' AND Enabled = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "ETL"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ETL Post Process delayed",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get delayed SPs incremental",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "loop tenants SRC-ETL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get delayed SPs incremental').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "execute delayed SP ETL",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": {
                                            "value": "ETL.@{item().TransformStoredProcedure}",
                                            "type": "Expression"
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SYN ETL - DW",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "ETL Post Process delayed",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "SYN ETL - DW",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "get delayed SPs full load",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT TransformStoredProcedure FROM ETL.cfg WHERE TransformType = 'stored-procedure-delayed-dw' AND Enabled = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "ETL"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "DW Post Process delayed",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "SYN ETL - DW",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "get delayed SPs full load",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get delayed SPs full load').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "execute delayed SP DW",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": {
                                            "value": "ETL.@{item().TransformStoredProcedure}",
                                            "type": "Expression"
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get all tables to truncate",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT\n    CASE LoadType\n        WHEN 'full' THEN DW_Tab\n        ELSE DST_Tab\n    END as TableName\nFROM [etl].[cfg]\nWHERE Enabled = 1 AND (LoadType = 'full' or LoadType = 'incremental') AND TableScope <> 'BCTenant'\nUNION\nSELECT distinct DST_Tab as TableName\nFROM [etl].[cfg]\nWHERE Enabled = 1 AND LoadType = 'incremental' AND TableScope = 'BCTenant'\nUNION\nSELECT distinct DW_Tab as TableName\nFROM [etl].[cfg]\nWHERE Enabled = 1 AND LoadType = 'full' AND TableScope = 'BCTenant';",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "DummyTable",
                                    "schemaname": "DW"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "loop truncate",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get all tables to truncate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get all tables to truncate').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "truncate table",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[etl].[sp_truncateTable]",
                                        "storedProcedureParameters": {
                                            "TABLENAME": {
                                                "value": {
                                                    "value": "@item().TableName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "SYN DWH",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "get company IDs",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "loop truncate",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": "SELECT DISTINCT SRC_CompanyID as CompanyID\nFROM ETL.cfg\nWHERE Enabled = 1",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "ETL"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "loop tenants SRC-ETL",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "get company IDs",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('get company IDs').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "SYN SRC - ETL",
                                    "description": "Laden der Daten aus der Source Datenbank in die ETL Stage des DWH",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "SYN SRC - ETL",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "TenantID": {
                                                "value": "@item().CompanyID",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SYN SRC - ETL', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "Get Tables",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlDWSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT * from ETL.cfg where Enabled=1 and SRC_CompanyID = @{pipeline().parameters.TenantID}",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "SYN_DWH",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": "cfg",
                                    "schemaname": "ETL"
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "loop incremental tables",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "incremental tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('incremental tables').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "get new max watermark",
                                    "description": "Get the highest watermark of transfered data in ETL stage.",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy incremental from given DB",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlDWSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT isnull(MAX(TimeStampInt),0) as maxts FROM @{item().DST_Tab} \n\n@{\nif(\nor(equals(item().TableScope,'NAVTenant'),equals(item().TableScope,'BCTenant')),\nconcat('WHERE CompanyID = ',item().SRC_CompanyID),\nnull\n)\n}",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "SYN_DWH",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tablename": {
                                                    "value": "@item().ETL_TableName",
                                                    "type": "Expression"
                                                },
                                                "schemaname": "ETL"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "hasInlinePostProcess_incr",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "If Max Watermark not 0",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(item().TransformType,'stored-procedure-inline')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "exec inline SP_incr",
                                                "description": "Ausführen der benutzerdefinierten Stored Procedure im \"inline\" Modus, also direkt nach Abschluss der Übertragung der Tabelle.",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": {
                                                        "value": "ETL.@{item().TransformStoredProcedure}",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "SYN DWH",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "If Max Watermark not 0",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "get new max watermark",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@not(\n   equals(\n      activity('get new max watermark').output.firstrow.maxts,\n      0\n      )\n   )",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Set watermark",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[ETL].[sp_UpdateWatermark]",
                                                    "storedProcedureParameters": {
                                                        "ID": {
                                                            "value": {
                                                                "value": "@item().ID",
                                                                "type": "Expression"
                                                            }
                                                        },
                                                        "NewWatermark": {
                                                            "value": {
                                                                "value": "@activity('get new max watermark').output.firstrow.maxts",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "SYN DWH",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Copy incremental from given DB",
                                    "description": "Führt den Kopierprozess aus. Wählt durch Case die korrekte IR mit Source DB aus.",
                                    "type": "Switch",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@item().SRC_Name",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "standard",
                                                "activities": [
                                                    {
                                                        "name": "throw error incremental load",
                                                        "type": "SetVariable",
                                                        "dependsOn": [],
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "variableName": "err",
                                                            "value": {
                                                                "value": "@div(1,0)",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "BOE-DE",
                                                "activities": [
                                                    {
                                                        "name": "copy SRC to ETL BOE-DE",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "SELECT @{item().Cols} FROM [@{item().SRC_tab}] WHERE @{item().WatermarkColumn} > @{if(equals(item().WatermarkValue,null),0,item().WatermarkValue)} @{if(equals(item().SourceFilterStatement,null),null, concat('and (',item().SourceFilterStatement,')'))}",
                                                                    "type": "Expression"
                                                                },
                                                                "queryTimeout": "02:00:00",
                                                                "partitionOption": "None"
                                                            },
                                                            "sink": {
                                                                "type": "SqlDWSink",
                                                                "allowPolyBase": true,
                                                                "polyBaseSettings": {
                                                                    "rejectValue": 0,
                                                                    "rejectType": "value",
                                                                    "useTypeDefault": true
                                                                },
                                                                "disableMetricsCollection": false
                                                            },
                                                            "enableStaging": true,
                                                            "stagingSettings": {
                                                                "linkedServiceName": {
                                                                    "referenceName": "SYN Stage",
                                                                    "type": "LinkedServiceReference"
                                                                }
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "SourceNAVDE",
                                                                "type": "DatasetReference",
                                                                "parameters": {}
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "SYN_DWH",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "tablename": {
                                                                        "value": "@item().ETL_TableName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "schemaname": "ETL"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "BOE-AT",
                                                "activities": [
                                                    {
                                                        "name": "copy SRC to ETL BOE-AT",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "SELECT @{item().Cols} FROM [@{item().SRC_tab}] WHERE @{item().WatermarkColumn} > @{if(equals(item().WatermarkValue,null),0,item().WatermarkValue)} @{if(equals(item().SourceFilterStatement,null),null, concat('and (',item().SourceFilterStatement,')'))}",
                                                                    "type": "Expression"
                                                                },
                                                                "queryTimeout": "02:00:00",
                                                                "partitionOption": "None"
                                                            },
                                                            "sink": {
                                                                "type": "SqlDWSink",
                                                                "allowPolyBase": true,
                                                                "polyBaseSettings": {
                                                                    "rejectValue": 0,
                                                                    "rejectType": "value",
                                                                    "useTypeDefault": true
                                                                },
                                                                "disableMetricsCollection": false
                                                            },
                                                            "enableStaging": true,
                                                            "stagingSettings": {
                                                                "linkedServiceName": {
                                                                    "referenceName": "SYN Stage",
                                                                    "type": "LinkedServiceReference"
                                                                }
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "SourceNAVAT",
                                                                "type": "DatasetReference",
                                                                "parameters": {}
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "SYN_DWH",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "tablename": {
                                                                        "value": "@item().ETL_TableName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "schemaname": "ETL"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "BOE-CH",
                                                "activities": [
                                                    {
                                                        "name": "copy SRC to ETL BOE-CH",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "SELECT @{item().Cols} FROM [@{item().SRC_tab}] WHERE @{item().WatermarkColumn} > @{if(equals(item().WatermarkValue,null),0,item().WatermarkValue)} @{if(equals(item().SourceFilterStatement,null),null, concat('and (',item().SourceFilterStatement,')'))}",
                                                                    "type": "Expression"
                                                                },
                                                                "queryTimeout": "02:00:00",
                                                                "partitionOption": "None"
                                                            },
                                                            "sink": {
                                                                "type": "SqlDWSink",
                                                                "allowPolyBase": true,
                                                                "polyBaseSettings": {
                                                                    "rejectValue": 0,
                                                                    "rejectType": "value",
                                                                    "useTypeDefault": true
                                                                },
                                                                "disableMetricsCollection": false
                                                            },
                                                            "enableStaging": true,
                                                            "stagingSettings": {
                                                                "linkedServiceName": {
                                                                    "referenceName": "SYN Stage",
                                                                    "type": "LinkedServiceReference"
                                                                }
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "SourceNAVCH",
                                                                "type": "DatasetReference",
                                                                "parameters": {}
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "SYN_DWH",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "tablename": {
                                                                        "value": "@item().ETL_TableName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "schemaname": "ETL"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "NAVTenant and simple full tables",
                        "description": "NAVTenant / simple\nFull Load",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "Get Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Tables').output.value",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@and(\nequals(item().LoadType,'full'),\nor(equals(item().TableScope,'NAVTenant'),equals(item().TableScope,'simple'))\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "incremental tables",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "Get Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Tables').output.value",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@and(\nequals(item().LoadType,'incremental'),\nnot(equals(item().TableScope,'CSVFile'))\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "loop full load tables",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "NAVTenant and simple full tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('NAVTenant and simple full tables').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "hasInlinePostProcess",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy full table from given DB",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(item().TransformType,'stored-procedure-inline-dw')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "exec inline SP",
                                                "description": "Ausführen der benutzerdefinierten Stored Procedure im \"inline\" Modus, also direkt nach Abschluss der Übertragung der Tabelle.",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": {
                                                        "value": "ETL.@{item().TransformStoredProcedure}",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "SYN DWH",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Copy full table from given DB",
                                    "description": "Führt den Kopierprozess aus. Wählt durch Case die korrekte IR mit Source DB aus.",
                                    "type": "Switch",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@item().SRC_Name",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "standard",
                                                "activities": [
                                                    {
                                                        "name": "throw error full load",
                                                        "type": "SetVariable",
                                                        "dependsOn": [],
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "variableName": "err",
                                                            "value": {
                                                                "value": "@div(1,0)",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "BOE-DE",
                                                "activities": [
                                                    {
                                                        "name": "full copy BOE-DE",
                                                        "description": "Laden aller Daten direkt in DW Stage",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "SELECT @{item().Cols} FROM [@{item().SRC_tab}] @{if(equals(item().SourceFilterStatement,null),null, concat('WHERE ',item().SourceFilterStatement))}",
                                                                    "type": "Expression"
                                                                },
                                                                "queryTimeout": "02:00:00",
                                                                "partitionOption": "None"
                                                            },
                                                            "sink": {
                                                                "type": "SqlDWSink",
                                                                "allowPolyBase": true,
                                                                "polyBaseSettings": {
                                                                    "rejectValue": 0,
                                                                    "rejectType": "value",
                                                                    "useTypeDefault": true
                                                                },
                                                                "disableMetricsCollection": false
                                                            },
                                                            "enableStaging": true,
                                                            "stagingSettings": {
                                                                "linkedServiceName": {
                                                                    "referenceName": "SYN Stage",
                                                                    "type": "LinkedServiceReference"
                                                                }
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "SourceNAVDE",
                                                                "type": "DatasetReference",
                                                                "parameters": {}
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "SYN_DWH",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "tablename": {
                                                                        "value": "@split(item().DW_Tab,'.')[1]",
                                                                        "type": "Expression"
                                                                    },
                                                                    "schemaname": {
                                                                        "value": "@split(item().DW_Tab,'.')[0]",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "BOE-AT",
                                                "activities": [
                                                    {
                                                        "name": "full copy BOE-AT",
                                                        "description": "Laden aller Daten direkt in DW Stage",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "SELECT @{item().Cols} FROM [@{item().SRC_tab}] @{if(equals(item().SourceFilterStatement,null),null, concat('WHERE ',item().SourceFilterStatement))}",
                                                                    "type": "Expression"
                                                                },
                                                                "queryTimeout": "02:00:00",
                                                                "partitionOption": "None"
                                                            },
                                                            "sink": {
                                                                "type": "SqlDWSink",
                                                                "allowPolyBase": true,
                                                                "polyBaseSettings": {
                                                                    "rejectValue": 0,
                                                                    "rejectType": "value",
                                                                    "useTypeDefault": true
                                                                },
                                                                "disableMetricsCollection": false
                                                            },
                                                            "enableStaging": true,
                                                            "stagingSettings": {
                                                                "linkedServiceName": {
                                                                    "referenceName": "SYN Stage",
                                                                    "type": "LinkedServiceReference"
                                                                }
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "SourceNAVAT",
                                                                "type": "DatasetReference",
                                                                "parameters": {}
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "SYN_DWH",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "tablename": {
                                                                        "value": "@split(item().DW_Tab,'.')[1]",
                                                                        "type": "Expression"
                                                                    },
                                                                    "schemaname": {
                                                                        "value": "@split(item().DW_Tab,'.')[0]",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "BOE-CH",
                                                "activities": [
                                                    {
                                                        "name": "full copy BOE-CH",
                                                        "description": "Laden aller Daten direkt in DW Stage",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "SELECT @{item().Cols} FROM [@{item().SRC_tab}] @{if(equals(item().SourceFilterStatement,null),null, concat('WHERE ',item().SourceFilterStatement))}",
                                                                    "type": "Expression"
                                                                },
                                                                "queryTimeout": "02:00:00",
                                                                "partitionOption": "None"
                                                            },
                                                            "sink": {
                                                                "type": "SqlDWSink",
                                                                "allowPolyBase": true,
                                                                "polyBaseSettings": {
                                                                    "rejectValue": 0,
                                                                    "rejectType": "value",
                                                                    "useTypeDefault": true
                                                                },
                                                                "disableMetricsCollection": false
                                                            },
                                                            "enableStaging": true,
                                                            "stagingSettings": {
                                                                "linkedServiceName": {
                                                                    "referenceName": "SYN Stage",
                                                                    "type": "LinkedServiceReference"
                                                                }
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "SourceNAVCH",
                                                                "type": "DatasetReference",
                                                                "parameters": {}
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "SYN_DWH",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "tablename": {
                                                                        "value": "@split(item().DW_Tab,'.')[1]",
                                                                        "type": "Expression"
                                                                    },
                                                                    "schemaname": {
                                                                        "value": "@split(item().DW_Tab,'.')[0]",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "BCTenant full tables",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "Get Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Tables').output.value",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@and(\nequals(item().LoadType,'full'),\nequals(item().TableScope,'BCTenant')\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "loop full load tables BCTenant full",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "BCTenant full tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('BCTenant full tables').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "hasInlinePostProcess BCTenant full",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy full table from given DB BCTenant full",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(item().TransformType,'stored-procedure-inline-dw')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "exec inline SP BCTenant full",
                                                "description": "Ausführen der benutzerdefinierten Stored Procedure im \"inline\" Modus, also direkt nach Abschluss der Übertragung der Tabelle.",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": {
                                                        "value": "ETL.@{item().TransformStoredProcedure}",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "SYN DWH",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Copy full table from given DB BCTenant full",
                                    "description": "Führt den Kopierprozess aus. Wählt durch Case die korrekte IR mit Source DB aus.",
                                    "type": "Switch",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@item().SRC_Name",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "standard",
                                                "activities": [
                                                    {
                                                        "name": "throw error full BCTenant load",
                                                        "type": "SetVariable",
                                                        "dependsOn": [],
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "variableName": "err",
                                                            "value": {
                                                                "value": "@div(1,0)",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "BOE-DE",
                                                "activities": [
                                                    {
                                                        "name": "full copy DE BCTenant full",
                                                        "description": "Laden aller Daten in die ETL Stage, da bei BCTenant trotz Vollübertragung trotzdem erst in die ETL Stage übertragen werden muss. Von der ETL Stage aus werden die Extension Tabellen in die DW Stage in einem späteren Schritt gemerged.",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "SELECT @{item().Cols} FROM [@{item().SRC_tab}] @{if(equals(item().SourceFilterStatement,null),null, concat('WHERE ',item().SourceFilterStatement))}",
                                                                    "type": "Expression"
                                                                },
                                                                "queryTimeout": "02:00:00",
                                                                "partitionOption": "None"
                                                            },
                                                            "sink": {
                                                                "type": "SqlDWSink",
                                                                "allowPolyBase": true,
                                                                "polyBaseSettings": {
                                                                    "rejectValue": 0,
                                                                    "rejectType": "value",
                                                                    "useTypeDefault": true
                                                                },
                                                                "disableMetricsCollection": false
                                                            },
                                                            "enableStaging": true,
                                                            "stagingSettings": {
                                                                "linkedServiceName": {
                                                                    "referenceName": "SYN Stage",
                                                                    "type": "LinkedServiceReference"
                                                                }
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "SourceNAVDE",
                                                                "type": "DatasetReference",
                                                                "parameters": {}
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "SYN_DWH",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "tablename": {
                                                                        "value": "@item().ETL_TableName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "schemaname": "ETL"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "BOE-AT",
                                                "activities": [
                                                    {
                                                        "name": "full copy AT BCTenant full",
                                                        "description": "Laden aller Daten in die ETL Stage, da bei BCTenant trotz Vollübertragung trotzdem erst in die ETL Stage übertragen werden muss. Von der ETL Stage aus werden die Extension Tabellen in die DW Stage in einem späteren Schritt gemerged.",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "SELECT @{item().Cols} FROM [@{item().SRC_tab}] @{if(equals(item().SourceFilterStatement,null),null, concat('WHERE ',item().SourceFilterStatement))}",
                                                                    "type": "Expression"
                                                                },
                                                                "queryTimeout": "02:00:00",
                                                                "partitionOption": "None"
                                                            },
                                                            "sink": {
                                                                "type": "SqlDWSink",
                                                                "allowPolyBase": true,
                                                                "polyBaseSettings": {
                                                                    "rejectValue": 0,
                                                                    "rejectType": "value",
                                                                    "useTypeDefault": true
                                                                },
                                                                "disableMetricsCollection": false
                                                            },
                                                            "enableStaging": true,
                                                            "stagingSettings": {
                                                                "linkedServiceName": {
                                                                    "referenceName": "SYN Stage",
                                                                    "type": "LinkedServiceReference"
                                                                }
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "SourceNAVAT",
                                                                "type": "DatasetReference",
                                                                "parameters": {}
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "SYN_DWH",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "tablename": {
                                                                        "value": "@item().ETL_TableName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "schemaname": "ETL"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "BOE-CH",
                                                "activities": [
                                                    {
                                                        "name": "full copy CH BCTenant full",
                                                        "description": "Laden aller Daten in die ETL Stage, da bei BCTenant trotz Vollübertragung trotzdem erst in die ETL Stage übertragen werden muss. Von der ETL Stage aus werden die Extension Tabellen in die DW Stage in einem späteren Schritt gemerged.",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "7.00:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "SqlServerSource",
                                                                "sqlReaderQuery": {
                                                                    "value": "SELECT @{item().Cols} FROM [@{item().SRC_tab}] @{if(equals(item().SourceFilterStatement,null),null, concat('WHERE ',item().SourceFilterStatement))}",
                                                                    "type": "Expression"
                                                                },
                                                                "queryTimeout": "02:00:00",
                                                                "partitionOption": "None"
                                                            },
                                                            "sink": {
                                                                "type": "SqlDWSink",
                                                                "allowPolyBase": true,
                                                                "polyBaseSettings": {
                                                                    "rejectValue": 0,
                                                                    "rejectType": "value",
                                                                    "useTypeDefault": true
                                                                },
                                                                "disableMetricsCollection": false
                                                            },
                                                            "enableStaging": true,
                                                            "stagingSettings": {
                                                                "linkedServiceName": {
                                                                    "referenceName": "SYN Stage",
                                                                    "type": "LinkedServiceReference"
                                                                }
                                                            }
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "SourceNAVCH",
                                                                "type": "DatasetReference",
                                                                "parameters": {}
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "SYN_DWH",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "tablename": {
                                                                        "value": "@item().ETL_TableName",
                                                                        "type": "Expression"
                                                                    },
                                                                    "schemaname": "ETL"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "CSV Files",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "Get Tables",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Tables').output.value",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@equals(item().TableScope,'CSVFile')\n",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "loop CSV tables",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "CSV Files",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('CSV Files').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "hasInlinePostProcess_CSV",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy CSV",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(item().TransformType,'stored-procedure-inline-dw')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "exec inline SP_CSV",
                                                "description": "Ausführen der benutzerdefinierten Stored Procedure im \"inline\" Modus, also direkt nach Abschluss der Übertragung der Tabelle.",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": {
                                                        "value": "ETL.@{item().TransformStoredProcedure}",
                                                        "type": "Expression"
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "SYN DWH",
                                                    "type": "LinkedServiceReference"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Copy CSV",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "SqlDWSink",
                                            "sqlWriterUseTableLock": true
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "CSVFile",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "filenameWithExtension": {
                                                    "value": "@item().SRC_Tab",
                                                    "type": "Expression"
                                                },
                                                "delimiter": {
                                                    "value": "@item().CSVDelimiter",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "SYN_DWH",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "tablename": {
                                                    "value": "@split(item().DW_Tab,'.')[1]",
                                                    "type": "Expression"
                                                },
                                                "schemaname": "ETL"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "TenantID": {
                        "type": "Int"
                    }
                },
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Synapse Pause', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "Get Synapse Status",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://management.azure.com/subscriptions/', pipeline().globalParameters.subscriptionID, '/resourceGroups/', pipeline().globalParameters.synapseresourceGroupName, '/providers/Microsoft.Synapse/workspaces/', pipeline().globalParameters.SynapseWorkspaceName, '/sqlPools/DWH?api-version=2019-06-01-preview')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://management.azure.com/"
                            }
                        }
                    },
                    {
                        "name": "isDWHonline",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get Synapse Status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Get Synapse Status').output.properties.status,'Online')",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Pause Synapse",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://management.azure.com/subscriptions/', pipeline().globalParameters.subscriptionID, '/resourceGroups/', pipeline().globalParameters.synapseresourceGroupName, '/providers/Microsoft.Synapse/workspaces/', pipeline().globalParameters.SynapseWorkspaceName, '/sqlPools/DWH/pause?api-version=2019-06-01-preview')",
                                            "type": "Expression"
                                        },
                                        "method": "POST",
                                        "headers": {},
                                        "body": "{null:null}",
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://management.azure.com/"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "folder": {
                    "name": "Manage"
                },
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Synapse Resume', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "Get Synapse Status",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://management.azure.com/subscriptions/', pipeline().globalParameters.subscriptionID, '/resourceGroups/', pipeline().globalParameters.synapseresourceGroupName, '/providers/Microsoft.Synapse/workspaces/', pipeline().globalParameters.SynapseWorkspaceName, '/sqlPools/DWH?api-version=2019-06-01-preview')",
                                "type": "Expression"
                            },
                            "method": "GET",
                            "headers": {},
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://management.azure.com/"
                            }
                        }
                    },
                    {
                        "name": "isDWHonline",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get Synapse Status",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Get Synapse Status').output.properties.status,'Online')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Resume Synapse",
                                    "type": "WebActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('https://management.azure.com/subscriptions/', pipeline().globalParameters.subscriptionID, '/resourceGroups/', pipeline().globalParameters.synapseresourceGroupName, '/providers/Microsoft.Synapse/workspaces/', pipeline().globalParameters.SynapseWorkspaceName, '/sqlPools/DWH/resume?api-version=2019-06-01-preview')",
                                            "type": "Expression"
                                        },
                                        "method": "POST",
                                        "headers": {},
                                        "body": "{null:null}",
                                        "authentication": {
                                            "type": "MSI",
                                            "resource": "https://management.azure.com/"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "folder": {
                    "name": "Manage"
                },
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Targit Shutdown', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "Targit Stop",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://management.azure.com/subscriptions/',pipeline().globalParameters.subscriptionID,'/resourceGroups/',pipeline().globalParameters.TARGITresourceGroupName,'/providers/Microsoft.Compute/virtualMachines/',pipeline().globalParameters.TargitVMName,'/deallocate?api-version=2020-06-01')",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {},
                            "body": "{null:null}",
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://management.azure.com/"
                            }
                        }
                    }
                ],
                "folder": {
                    "name": "Manage"
                },
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Targit Start', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "Targit Start",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://management.azure.com/subscriptions/',pipeline().globalParameters.subscriptionID,'/resourceGroups/',pipeline().globalParameters.TARGITresourceGroupName,'/providers/Microsoft.Compute/virtualMachines/',pipeline().globalParameters.TargitVMName,'/start?api-version=2020-06-01')",
                                "type": "Expression"
                            },
                            "method": "POST",
                            "headers": {},
                            "body": "{null:null}",
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://management.azure.com/"
                            }
                        }
                    }
                ],
                "folder": {
                    "name": "Manage"
                },
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Azure AS Scale', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "activities": [
                    {
                        "name": "AS scale",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": {
                                "value": "@concat('https://management.azure.com/subscriptions/', pipeline().globalParameters.subscriptionID, '/resourceGroups/', pipeline().globalParameters.resourceGroupName, '/providers/Microsoft.AnalysisServices/servers/', pipeline().globalParameters.analysisserviceName, '?api-version=2017-08-01')",
                                "type": "Expression"
                            },
                            "method": "PATCH",
                            "headers": {},
                            "body": {
                                "value": "{\"sku\":{\"name\":\"@{pipeline().parameters.ASSKU}\"}}",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://management.azure.com/"
                            }
                        }
                    }
                ],
                "parameters": {
                    "ASSKU": {
                        "type": "String",
                        "defaultValue": "S0"
                    }
                },
                "folder": {
                    "name": "Manage"
                },
                "annotations": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SYN_DWH', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SYN DWH",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "tablename": {
                        "type": "String",
                        "defaultValue": "DummyTable"
                    },
                    "schemaname": {
                        "type": "String",
                        "defaultValue": "DW"
                    }
                },
                "annotations": [],
                "type": "AzureSqlDWTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().schemaname",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().tablename",
                        "type": "Expression"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SourceNAVDE', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SourceNAVDE",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [],
                "typeProperties": {}
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SourceNAVAT', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SourceNAVAT",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [],
                "typeProperties": {}
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SourceNAVCH', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SourceNAVCH",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [],
                "typeProperties": {}
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/CSVFile', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/CSVStorage', variables('dataFactoryName')), '/')[0], split(format('{0}/CSVStorage', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "linkedServiceName": {
                    "referenceName": "CSVStorage",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filenameWithExtension": {
                        "type": "String"
                    },
                    "delimiter": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().filenameWithExtension",
                            "type": "Expression"
                        },
                        "container": "externaldata"
                    },
                    "columnDelimiter": {
                        "value": "@dataset().delimiter",
                        "type": "Expression"
                    },
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SYN DWH', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/AT-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/AT-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/CH-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/CH-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/DE-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/DE-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName')), '/')[0], split(format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName')), '/')[1])]",
                "[resourceId('Microsoft.Synapse/workspaces/sqlPools', split(variables('SynapsePoolName'), '/')[0], split(variables('SynapsePoolName'), '/')[1])]"
            ],
            "properties": {
                "annotations": [],
                "type": "AzureSqlDW",
                "typeProperties": {
                    "connectionString": "[variables('DWHConnectionstring')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "KeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "SynapseSQLPW"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/KeyVault', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/AT-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/AT-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/CH-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/CH-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/DE-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/DE-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName')), '/')[0], split(format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName')), '/')[1])]"
            ],
            "properties": {
                "annotations": [],
                "type": "AzureKeyVault",
                "typeProperties": {
                    "baseUrl": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))).vaultUri]"
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SYN Stage', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('SynapseStageStorageName'))]"
            ],
            "properties": {
                "annotations": [],
                "type": "AzureBlobStorage",
                "typeProperties": {
                    "serviceEndpoint": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('SynapseStageStorageName'))).primaryEndpoints.blob]",
                    "accountKind": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('SynapseStageStorageName')), '2019-06-01', 'full').kind]"
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/CSVStorage', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "description": "ubipdlwdfv242",
                "annotations": [],
                "type": "AzureBlobStorage",
                "typeProperties": {
                    "serviceEndpoint": "[variables('CSVStorageEndpointURI')]",
                    "accountKind": "StorageV2"
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SourceNAVDE', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/AT-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/AT-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/CH-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/CH-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/DE-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/DE-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName')), '/')[0], split(format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName')), '/')[1])]"
            ],
            "properties": {
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": "[variables('SourceNAVDE_connectionString')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "KeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "DE-NAV-DB-PW"
                    }
                },
                "connectVia": {
                    "referenceName": "BOE-DE",
                    "type": "IntegrationRuntimeReference"
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SourceNAVAT', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/AT-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/AT-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/CH-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/CH-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/DE-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/DE-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName')), '/')[0], split(format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName')), '/')[1])]"
            ],
            "properties": {
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": "[variables('SourceNAVAT_connectionString')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "KeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "AT-NAV-DB-PW"
                    }
                },
                "connectVia": {
                    "referenceName": "BOE-AT",
                    "type": "IntegrationRuntimeReference"
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/SourceNAVCH', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/AT-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/AT-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/CH-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/CH-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/DE-NAV-DB-PW', variables('KeyVaultName')), '/')[0], split(format('{0}/DE-NAV-DB-PW', variables('KeyVaultName')), '/')[1])]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName')), '/')[0], split(format('{0}/{1}', variables('KeyVaultName'), variables('SYNSqlSecretName')), '/')[1])]"
            ],
            "properties": {
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": "[variables('SourceNAVCH_connectionString')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "KeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "CH-NAV-DB-PW"
                    }
                },
                "connectVia": {
                    "referenceName": "BOE-CH",
                    "type": "IntegrationRuntimeReference"
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/BOE-DE', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 10,
                            "cleanup": false
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/BOE-AT', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 10,
                            "cleanup": false
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/BOE-CH', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 10,
                            "cleanup": false
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Autostart', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "description": "Trigger für das Starten aller relevanten Services für Targit und die Endbenutzerinteraktion.",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "Azure AS Resume",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    },
                    {
                        "pipelineReference": {
                            "referenceName": "Targit Start",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2021-01-01T00:00:00.00000000Z",
                        "timeZone": "W. Europe Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                9
                            ],
                            "weekDays": [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday"
                            ]
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Autostop', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "description": "Trigger für das Stoppen aller relevanten Services für Targit und die Endbenutzerinteraktion.",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "Azure AS Suspend",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    },
                    {
                        "pipelineReference": {
                            "referenceName": "Targit Shutdown",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2021-01-01T00:00:00.00000000Z",
                        "timeZone": "W. Europe Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                17
                            ],
                            "weekDays": [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Sunday",
                                "Saturday"
                            ]
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/Daily-Refresh', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "description": "Tägliche Updates des DWH / AS",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "SYN MASTER",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Week",
                        "interval": 1,
                        "startTime": "2021-01-01T00:00:00.00000000Z",
                        "timeZone": "W. Europe Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                2
                            ],
                            "weekDays": [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Sunday"
                            ]
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "name": "[format('{0}/DWH Shutdown', variables('dataFactoryName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "description": "\"Sicherheits-Shutdown\" für das DWH um Kosten durch vergessenes ausschalten zu verhindern. ",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "Synapse Pause",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2021-01-01T00:00:00.00000000Z",
                        "timeZone": "W. Europe Standard Time",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                20
                            ]
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[guid(uniqueString(variables('analysisServiceName')))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/KeyVault', variables('dataFactoryName')), '/')[0], split(format('{0}/KeyVault', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER without StartStop', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER without StartStop', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.AnalysisServices/servers', variables('analysisServiceName'))]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('ContributorRoleID')]",
                "principalId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]"
            },
            "scope": "[format('Microsoft.AnalysisServices/servers/{0}', variables('analysisServiceName'))]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[guid(uniqueString(variables('dataFactoryName')))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/KeyVault', variables('dataFactoryName')), '/')[0], split(format('{0}/KeyVault', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER without StartStop', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER without StartStop', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('SynapseStageStorageName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('ContributorRoleID')]",
                "principalId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]"
            },
            "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('SynapseStageStorageName'))]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[guid(uniqueString(format('{0}{1}', variables('dataFactoryName'), variables('SynapseStageStorageName'))))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/KeyVault', variables('dataFactoryName')), '/')[0], split(format('{0}/KeyVault', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER without StartStop', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER without StartStop', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('SynapseStageStorageName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('StorageBlobDataContributorRoleID')]",
                "principalId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]"
            },
            "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('SynapseStageStorageName'))]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[guid(uniqueString(variables('SynapseName')))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/KeyVault', variables('dataFactoryName')), '/')[0], split(format('{0}/KeyVault', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER without StartStop', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER without StartStop', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('SynapseName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('ContributorRoleID')]",
                "principalId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]"
            },
            "scope": "[format('Microsoft.Synapse/workspaces/{0}', variables('SynapseName'))]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[guid(uniqueString(variables('DataLakeName')))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('DataLakeName'))]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('SynapseName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('StorageBlobDataContributorRoleID')]",
                "principalId": "[reference(resourceId('Microsoft.Synapse/workspaces', variables('SynapseName')), '2020-12-01', 'full').identity.principalId]"
            },
            "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('DataLakeName'))]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[guid(uniqueString(variables('SynapseStageStorageName')))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('SynapseStageStorageName'))]",
                "[resourceId('Microsoft.Synapse/workspaces', variables('SynapseName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('StorageBlobDataContributorRoleID')]",
                "principalId": "[reference(resourceId('Microsoft.Synapse/workspaces', variables('SynapseName')), '2020-12-01', 'full').identity.principalId]"
            },
            "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('SynapseStageStorageName'))]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[guid(uniqueString(format('{0}onDL', variables('dataFactoryName'))))]",
            "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/datasets', split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN_DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-AT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-CH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[0], split(format('{0}/BOE-DE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/KeyVault', variables('dataFactoryName')), '/')[0], split(format('{0}/KeyVault', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVAT', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVCH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[0], split(format('{0}/SourceNAVDE', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DWH', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/linkedservices', split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN Stage', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Suspend', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Refresh', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Azure AS Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN DELETE ALL DW and ETL DATA', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN ETL - DW', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN MASTER without StartStop', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN MASTER without StartStop', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[0], split(format('{0}/SYN SRC - ETL', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Pause', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[0], split(format('{0}/Synapse Resume', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Shutdown', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories/pipelines', split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[0], split(format('{0}/Targit Start', variables('dataFactoryName')), '/')[1])]",
                "[resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('DataLakeName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('StorageBlobDataContributorRoleID')]",
                "principalId": "[reference(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '2018-06-01', 'full').identity.principalId]"
            },
            "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('DataLakeName'))]"
        }
    ]
}